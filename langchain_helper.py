from langchain_openai import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from dotenv import load_dotenv
from langchain.agents import load_tools, initialize_agent, AgentType
import openai


load_dotenv()


def generate_pet_name(animal_type: str, pet_color: str) -> dict | str:
    """
    Generate a random pet name by taking our prompt then returning it as a list of names generated by openAI
    :param animal_type:
    :param pet_color:
    :return: dict | str
    """
    # creating our llm
    llm = OpenAI(temperature=0.5)

    # in order not to repeat our prompt and be more flexible we will use the promptTemplate
    prompt_template_name = PromptTemplate(
        input_variables=['animal_type', 'pet_color'],
        template=f"I have an {animal_type} and I want a cool name for it.its color is {pet_color}."
                 f"Suggest for me five cool names"
    )

    # we will use a try catch in order to avoid issues with our model
    try:
        name_chain = LLMChain(llm=llm, prompt=prompt_template_name, output_key="pet_name")
        response = name_chain.invoke({'animal_type': animal_type, 'pet_color': pet_color})
        return response

    except openai.RateLimitError:
        return "API request limit exceeded. Please try again later."

    except openai.OpenAIError as e:
        return f"An API error occurred: {str(e)}"


def langchain_agent():
    """

    :return:
    """
    # creating our model
    llm = OpenAI(temperature=0.5)

    # creating our tools
    tools = load_tools(["wikipedia", "llm-math"], llm=llm)

    # creating our agent
    agent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)

    # telling the agent what to do
    result = agent.run(
        "What is the average age of a dog? Multiply the age by 3"
    )

    print(result)


if __name__ == "__main__":
    print(langchain_agent())
    print(generate_pet_name('cow', 'red'))
